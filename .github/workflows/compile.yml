name: 📦 Compile ESP8266 Sketch

on:
  push:
    branches: [main]  # 🔁 Jalankan workflow saat ada push ke branch 'main'
  workflow_dispatch:  # ▶️ Bisa dijalankan manual lewat GitHub Actions UI

permissions:
  contents: write  # ✍️ Diperlukan untuk membuat release

jobs:
  build:
    runs-on: ubuntu-latest  # 💻 Gunakan mesin Ubuntu terbaru

    steps:
    - name: 🛒 Checkout source code
      uses: actions/checkout@v4  # 📂 Ambil kode dari repository

    - name: ⚙️ Set up Arduino CLI
      uses: arduino/setup-arduino-cli@v1  # 🔧 Install Arduino CLI

    - name: 🧱 Initialize Arduino CLI config
      run: arduino-cli config init  # 🗃️ Inisialisasi konfigurasi Arduino CLI

    - name: ➕ Add ESP8266 Board Manager URL
      run: |
        arduino-cli config add board_manager.additional_urls https://arduino.esp8266.com/stable/package_esp8266com_index.json
        # 🔗 Tambahkan URL board manager untuk ESP8266

    - name: 📥 Install ESP8266 core
      run: |
        arduino-cli core update-index  # 🔄 Update daftar core
        arduino-cli core install esp8266:esp8266  # 📲 Install core ESP8266

    - name: 📁 Configure Arduino library path
      run: |
        echo "directories:\n  user: $HOME/Arduino" > ~/.arduino15/arduino-cli.yaml
        # 🛤️ Set path ke folder library pengguna

    - name: 📚 Install required libraries
      run: |
        arduino-cli lib install "UniversalTelegramBot"  # 💬 Untuk bot Telegram
        arduino-cli lib install "ArduinoJson"           # 🧾 Untuk parsing JSON
        arduino-cli lib install "WebSockets"            # 🌐 Untuk komunikasi websocket
        arduino-cli lib install "Servo"                 # ⚙️ Untuk kontrol servo

        # 📦 Manual install LiquidCrystal_I2C (karena tidak tersedia via Arduino CLI)
        mkdir -p ~/Arduino/libraries
        cd ~/Arduino/libraries
        curl -L https://github.com/johnrickman/LiquidCrystal_I2C/archive/refs/heads/master.zip -o LiquidCrystal_I2C.zip
        unzip LiquidCrystal_I2C.zip
        mv LiquidCrystal_I2C-master LiquidCrystal_I2C

    - name: 🛠️ Compile sketch
      run: |
        arduino-cli compile \
          --fqbn esp8266:esp8266:nodemcuv2 \
          sketch \
          --output-dir build \
          --verbose
        # 🔨 Kompilasi file .ino jadi binary (.bin)

    - name: 📅 Get date
      id: date
      run: echo "today=$(date +%F-%H%M)" >> "$GITHUB_OUTPUT"
      # 🕓 Ambil tanggal dan waktu saat ini (format: YYYY-MM-DD-HHMM)

    - name: 🗃️ Rename firmware with date
      run: |
        ls build  # 👀 Lihat isi folder build
        for f in build/*.bin; do
          mv "$f" "build/esp8266wifi12e-${{ steps.date.outputs.today }}.bin"
        done
        # 🏷️ Rename firmware agar ada tanggal dan waktu di namanya

    - name: 📤 Upload firmware artifact
      uses: actions/upload-artifact@v4
      with:
        name: esp8266wifi12e-${{ steps.date.outputs.today }}
        path: build/esp8266wifi12e-*.bin
        # ☁️ Upload firmware ke GitHub sebagai artifact

    - name: 🚀 Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: esp8266wifi12e-${{ steps.date.outputs.today }}
        files: build/esp8266wifi12e-*.bin
        # 🏁 Buat release baru di GitHub dengan file .bin yang sudah di-build